#!/bin/bash
#!cfg=$1
#! sbatch directives begin here ###############################
#SBATCH --job-name=Bs2etas-uf5
#SBATCH --output=./out/Bs2etas-%A.out
#SBATCH --error=./out/Bs2etas-%A.err
#SBATCH -A DIRAC-DP019-CPU
#SBATCH --nodes=4
#! How many (MPI) tasks will there be in total? (<= nodes*32)
#SBATCH --ntasks=128
#SBATCH --time=5:00:00
#SBATCH --mail-type=FAIL
##SBATCH --mail-user=2399654P@student.gla.ac.uk
#! Uncomment this to prevent the job from being requeued (e.g. if
#! interrupted by node failure or system downtime):
#SBATCH --no-requeue
#! For 6GB per CPU core, set "-p skylake"; for 12GB per CPU core, set "-p skylake-himem": 
#SBATCH -p skylake

#! Number of nodes and tasks per node allocated by SLURM (do not change):
numnodes=$SLURM_JOB_NUM_NODES
numtasks=$SLURM_NTASKS
mpi_tasks_per_node=$(echo "$SLURM_TASKS_PER_NODE" | sed -e  's/^\([0-9][0-9]*\).*$/\1/')
#! ############################################################
#! Modify the settings below to specify the application's environment, location 
#! and launch method:

#! Optionally modify the environment seen by the application
#! (note that SLURM reproduces the environment at submission irrespective of ~/.bashrc):
. /etc/profile.d/modules.sh                # Leave this line (enables the module command)
module purge                               # Removes all modules still loaded
module load rhel7/default-peta4            # REQUIRED - loads the basic environment

#! Insert additional module load commands after this line if needed:

cfg=$1

#! Full path to application executable: 
root="."
temp="./temp"

run_milc_2pt()
{
  local application="${root}/ks_spectrum_hisq_7.7.11_skylake"
  local cfg=$1
  echo "Running 2pt, configuration ${cfg}, `date`"
  milc_in="${root}/in/input-2pt/milc_2pt_${cfg}.in"
  milc_out="${root}/out/milc_2pt_${cfg}.out"
  mpirun -ppn $mpi_tasks_per_node -np $np $application ${milc_in} > ${milc_out}
}

run_milc_ext_src()
{
  local application="${root}/ext_src_skylake"
  local cfg=$1
  echo "Running ext_src, configuration ${cfg}, `date`"
  milc_in="${root}/in/input-extsrc/milc_ext_${cfg}.in"
  milc_out="${root}/out/milc_ext_${cfg}.out"
  mpirun -ppn $mpi_tasks_per_node -np $np $application ${milc_in} > ${milc_out}
}

run_milc_3pt()
{
  local application="${root}/ks_spectrum_hisq_7.7.11_skylake"
  local cfg=$1
  echo "Running 3pt, configuration ${cfg}, `date`"
  milc_in="${root}/in/input-3pt/milc_3pt_${cfg}.in"
  milc_out="${root}/out/milc_3pt_${cfg}.out"
  mpirun -ppn $mpi_tasks_per_node -np $np $application ${milc_in} > ${milc_out}
}

cleanup()
{
  local ens=l64192f211b700m00316m0158m188
  local cfg=$1
  echo "Removing temporary files, configuration ${cfg}, `date`"
  rm ${temp}/${ens}.${cfg}_*
}

#! Work directory (i.e. where the job will run):
workdir="${root}"  # The value of SLURM_SUBMIT_DIR sets workdir to the directory
                             # in which sbatch is run.

#! Are you using OpenMP (NB this is unrelated to OpenMPI)? If so increase this
#! safe value to no more than 32:
export OMP_NUM_THREADS=1

#! Number of MPI tasks to be started by the application per node and in total (do not change):
np=$[${numnodes}*${mpi_tasks_per_node}]

#! The following variables define a sensible pinning strategy for Intel MPI tasks -
#! this should be suitable for both pure MPI and hybrid MPI/OpenMP jobs:
export I_MPI_PIN_DOMAIN=omp:compact # Domains are $OMP_NUM_THREADS cores in size
export I_MPI_PIN_ORDER=scatter # Adjacent domains have minimal sharing of caches/sockets
#! Notes:
#! 1. These variables influence Intel MPI only.
#! 2. Domains are non-overlapping sets of cores which map 1-1 to MPI tasks.
#! 3. I_MPI_PIN_PROCESSOR_LIST is ignored if I_MPI_PIN_DOMAIN is set.
#! 4. If MPI tasks perform better when sharing caches/sockets, try I_MPI_PIN_ORDER=compact.


###############################################################
### You should not have to change anything below this line ####
###############################################################

cd $workdir
echo -e "Changed directory to `pwd`.\n"

JOBID=$SLURM_JOB_ID

echo -e "JobID: $JOBID\n======"
echo "Time: `date`"
echo "Running on master node: `hostname`"
echo "Current directory: `pwd`"

if [ "$SLURM_JOB_NODELIST" ]; then
        #! Create a machine file:
        export NODEFILE=`generate_pbs_nodefile`
        cat $NODEFILE | uniq > machine.file.$JOBID
        echo -e "\nNodes allocated:\n================"
        echo `cat machine.file.$JOBID | sed -e 's/\..*$//g'`
        mv machine.file.$JOBID "${root}/out/" 2>/dev/null
fi

echo -e "\nnumtasks=$numtasks, numnodes=$numnodes, mpi_tasks_per_node=$mpi_tasks_per_node (OMP_NUM_THREADS=$OMP_NUM_THREADS)"

run_milc_2pt $cfg
run_milc_ext_src $cfg
run_milc_3pt $cfg


cleanup $cfg

echo "Time: `date`"
